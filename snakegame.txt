from tkinter import*
import random
GW=800
GH=600
SPEED=80
SPACE=50
BP=3
SC="blue"
FD="red"
BC="black"


class Snake:
 def __init__(self):
                 self.body_size=BP
                 self.coordinates=[]
                 self.squares=[]
                 for i in range(0,BP):
                     self.coordinates.append([0,0])
                 for x,y in self.coordinates:
                     square = canvas.create_oval(x,y,x+SPACE,y+SPACE,fill=SC,tag="snake")
                     self.squares.append(square)
class Food:
            def __init__(self, snake):
                self.coordinates = self.generate_new_position(snake)
                self.draw()

            def generate_new_position(self, snake):
                while True:
                    x = random.randint(0, (GW // SPACE - 1)) * SPACE
                    y = random.randint(0, (GH // SPACE - 1)) * SPACE
                    if [x, y] not in snake.coordinates:
                        return [x, y]

            def draw(self):
                x,y = self.coordinates
                canvas.create_oval(x, y, x + SPACE, y + SPACE, fill=FD, tag="food")
def nextturn(snake, food):
            x,y=snake.coordinates[0]
            if dr=="up":
              y-=SPACE
            elif dr=="down":
              y+=SPACE  
            elif dr=="left":
              x-=SPACE  
            elif dr=="right":
              x+=SPACE

            snake.coordinates.insert(0,(x,y))
            square=canvas.create_oval(x,y,x+SPACE,y+SPACE,fill=SC)
            snake.squares.insert(0,square)
            
            if x == food.coordinates[0] and y == food.coordinates[1]:
                global score
                score += 1
                label.config(text="Score:{}".format(score))
                canvas.delete("food")
                food = Food(snake)

            else:
              del snake.coordinates[-1]
              canvas.delete(snake.squares[-1])
              del snake.squares[-1]
            if collisions(snake):
                gameover()
            else:    
                window.after(SPEED,nextturn,snake,food)
            
def nxtdirection(nd):
            global dr
            if nd == 'left':
                if dr!='right':
                    dr=nd
            elif nd == 'right':
                if dr!='left':
                    dr=nd
            elif nd == 'up':
                if dr!='down':
                    dr=nd
            elif nd == 'down':
                if dr!='up':
                    dr=nd        
def collisions(snake):
            x,y=snake.coordinates[0]

            if x<0 or x>=GW:
             return True
            if y<0 or y>=GH:
             return True
            for BP in snake.coordinates[1:]:
                if x==BP[0] and y==BP[1]:
                 return True
            

def gameover():
            canvas.delete(ALL)
            canvas.create_text(canvas.winfo_width()/2,canvas.winfo_height()/2,font=('consolas',70),text="GAME OVER",fill="red",tag="game")
            

window=Tk()
window.title("SNAKE GAME")
window.resizable(50,100)
score=0
dr="down"

label=Label(window,text="score:{}".format(score),font=('consolas',40))
label.pack()

canvas=Canvas(window,bg=BC,height=GH,width=GW)
canvas.pack()
window.update()


windowwidth = (window.winfo_width())
windowheight = (window.winfo_height())
screenwidth = (window.winfo_screenwidth())
screenheight =(window.winfo_screenheight())
x = int((screenwidth / 2) - (windowwidth / 2))
y = int((screenheight / 2) - (windowheight / 2))
window.geometry(f"{int(windowwidth)}x{int(windowheight)}+{x}+{y}")
window.bind('<Left>',lambda event: nxtdirection('left'))
window.bind('<Right>',lambda event: nxtdirection('right'))
window.bind('<Up>',lambda event: nxtdirection('up'))
window.bind('<Down>',lambda event: nxtdirection('down'))
snake = Snake()
food = Food(snake)

nextturn(snake, food)
window.mainloop()